apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "wazuh.fullname" . }}-agent
  labels:
  {{- include "wazuh.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: wazuh-agent
    {{- include "wazuh.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: wazuh-agent
      {{- include "wazuh.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - env:
        - name: JOIN_MANAGER_MASTER_HOST
          value: "wazuh.wazuh.svc.cluster.local"
        - name: JOIN_MANAGER_WORKER_HOST
          value: wazuh-workers.wazuh.svc.cluster.local
        - name: JOIN_MANAGER_PROTOCOL
          value: "https"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: JOIN_MANAGER_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ include "wazuh.fullname" . }}-api-cred
        - name: JOIN_MANAGER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ include "wazuh.fullname" . }}-api-cred
        - name: JOIN_MANAGER_API_PORT
          value: "55000"
        - name: JOIN_MANAGER_PORT
          value: "1514"
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.wazuhAgent.image.repository }}:{{ .Values.wazuhAgent.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.wazuhAgent.imagePullPolicy }}
        name: wazuh-agent
        ports:
        - containerPort: 5000
          name: agent-http
          protocol: TCP
        resources: {{- toYaml .Values.wazuhAgent.resources | nindent 10 }}
        securityContext: {{- toYaml .Values.wazuhAgent.containerSecurityContext
          | nindent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run
          name: var-run
        - mountPath: /host/dev
          name: dev
        - mountPath: /host/sys
          name: sys
          readOnly: true
        - mountPath: /host/proc
          name: proc
          readOnly: true
        - mountPath: /host/etc
          name: etc
          readOnly: true
        - mountPath: /var/run/docker.sock
          name: docker-socket-mount
        - mountPath: /host/var/run/docker.sock
          name: docker-socket-mount
        - mountPath: /host/boot
          name: boot
          readOnly: true
        - mountPath: /host/usr
          name: usr
          readOnly: true
        - mountPath: /host/lib/modules
          name: modules
          readOnly: true
        - mountPath: /host/var/log
          name: log
          readOnly: true
      dnsPolicy: ClusterFirst
      hostIPC: true
      hostPID: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /var/run/docker.sock
          type: ""
        name: docker-socket-mount
      - hostPath:
          path: /var/run
          type: ""
        name: var-run
      - hostPath:
          path: /dev
          type: ""
        name: dev
      - hostPath:
          path: /sys
          type: ""
        name: sys
      - hostPath:
          path: /proc
          type: ""
        name: proc
      - hostPath:
          path: /etc
          type: ""
        name: etc
      - hostPath:
          path: /boot
          type: ""
        name: boot
      - hostPath:
          path: /usr
          type: ""
        name: usr
      - hostPath:
          path: /lib/modules
          type: ""
        name: modules
      - hostPath:
          path: /var/log
          type: ""
        name: log
